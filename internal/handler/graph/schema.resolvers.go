package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"

	"github.com/RipperAcskt/innotaxiorder/internal/model"
	"github.com/RipperAcskt/innotaxiorder/internal/service"
)

type key string

const userId key = "id"
const userType key = "type"

// CreateOrder is the resolver for the CreateOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.OrderInfo) (*model.Order, error) {
	info := model.Order{
		TaxiType: input.TaxiType,
		From:     input.From,
		To:       input.To,
	}

	userType, ok := FromContext(ctx, userType)
	if !ok {
		return nil, fmt.Errorf("bad type")
	}
	if userType != "user" {
		return nil, service.ErrValidation
	}

	id, ok := FromContext(ctx, userId)
	if !ok {
		return nil, fmt.Errorf("bad access token")
	}

	orders, err := r.s.GetOrderByID(ctx, id, model.StatusWaiting.String())
	if err != nil {
		return nil, fmt.Errorf("get order failed: %w", err)
	}

	if len(orders) != 0 {
		return nil, fmt.Errorf("you already have order")
	}

	info.UserID = id
	err = r.s.Create(ctx, info)
	if err != nil {
		return nil, fmt.Errorf("create order failed: %w", err)
	}

	orders, err = r.s.GetOrderByID(ctx, id, model.StatusWaiting.String())
	if err != nil {
		return nil, fmt.Errorf("get order failed: %w", err)
	}

	if len(orders) == 0 {
		return nil, fmt.Errorf("create order failed")
	}

	return orders[0], nil
}

func ContextWithId(ctx context.Context, k key, id string) context.Context {
	return context.WithValue(ctx, k, id)
}

func FromContext(ctx context.Context, k key) (string, bool) {
	id, ok := ctx.Value(k).(string)
	return id, ok
}

// SetRaiting is the resolver for the SetRaiting field.
func (r *mutationResolver) SetRaiting(ctx context.Context, input model.Raiting) (string, error) {
	panic(fmt.Errorf("not implemented: SetRaiting - SetRaiting"))
}

// CompleteOrder is the resolver for the CompleteOrder field.
func (r *mutationResolver) CompleteOrder(ctx context.Context, input string) (*model.Order, error) {
	id, ok := FromContext(ctx, userId)
	if !ok {
		return nil, fmt.Errorf("bad access token")
	}

	userType, ok := FromContext(ctx, userType)
	if !ok {
		return nil, fmt.Errorf("bad type")
	}
	if userType != "user" {
		return nil, service.ErrValidation
	}
	return r.s.CompleteOrder(ctx, id)
}

// GetOrders is the resolver for the GetOrders field.
func (r *queryResolver) GetOrders(ctx context.Context, indexes []string) ([]*model.Order, error) {
	o, err := r.s.GetOrder(ctx, indexes)
	return o, err
}

// CheckStatus is the resolver for the CheckStatus field.
func (r *queryResolver) CheckStatus(ctx context.Context, index string) (*model.Order, error) {
	id, ok := FromContext(ctx, userId)
	if !ok {
		return nil, fmt.Errorf("bad access token")
	}

	userType, ok := FromContext(ctx, userType)
	if !ok {
		return nil, fmt.Errorf("bad type")
	}
	if userType != "user" {
		return nil, service.ErrValidation
	}

	return r.s.Find(ctx, id)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

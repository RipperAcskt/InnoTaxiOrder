package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"

	"github.com/RipperAcskt/innotaxiorder/internal/model"
)

var (
	ErrNotFoud = fmt.Errorf("not found")
)

// CreateOrder is the resolver for the CreateOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.OrderInfo) (*model.Order, error) {
	info := model.Order{
		TaxiType: input.TaxiType,
		From:     input.From,
		To:       input.To,
	}

	err := r.s.Create(ctx, info)
	if err != nil {
		return nil, fmt.Errorf("create order failed: %w", err)
	}
	return nil, nil
}

// SetRaiting is the resolver for the SetRaiting field.
func (r *mutationResolver) SetRaiting(ctx context.Context, input model.Raiting) (string, error) {
	panic(fmt.Errorf("not implemented: SetRaiting - SetRaiting"))
}

// SetOrderState is the resolver for the SetOrderState field.
func (r *mutationResolver) SetOrderState(ctx context.Context, input model.OrderState) (string, error) {
	panic(fmt.Errorf("not implemented: SetOrderState - SetOrderState"))
}

// GetOrders is the resolver for the GetOrders field.
func (r *queryResolver) GetOrders(ctx context.Context, indexes []string) ([]*model.Order, error) {
	o, err := r.s.GetOrder(ctx, indexes)
	return o, err
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

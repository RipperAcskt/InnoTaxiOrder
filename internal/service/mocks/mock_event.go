// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RipperAcskt/innotaxiorder/internal/service (interfaces: EventService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/RipperAcskt/innotaxiorder/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// SendCompleteOrderEvent mocks base method.
func (m *MockEventService) SendCompleteOrderEvent(arg0 model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCompleteOrderEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCompleteOrderEvent indicates an expected call of SendCompleteOrderEvent.
func (mr *MockEventServiceMockRecorder) SendCompleteOrderEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCompleteOrderEvent", reflect.TypeOf((*MockEventService)(nil).SendCompleteOrderEvent), arg0)
}
